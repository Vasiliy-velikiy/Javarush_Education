package JavaRushLevel14;
/*Класс является синглтоном (реализует паттерн Singleton), если позволяет создать всего один объект своего типа.

Реализуй Singleton pattern:
Создай класс Singleton в отдельном файле.
Добавь в него статический метод getInstance().
При любом вызове метода getInstance() он должен возвращать один и тот же объект класса Singleton.
Подумай, каким образом можно запретить создание других объектов этого класса.
Сделай все конструкторы в классе Singleton приватными (private).
В итоге должна быть возможность создать объект (экземпляр класса) используя только метод getInstance*/
public class SingletonTest {
    public static void main(String[] args) {
    }
}

final class Singleton {
    //#1. – Нужно добавить в класс приватное статическое поле, содержащее одиночный объект:
    private  static Singleton singleton;

    //#2. – Сделать конструктор класса (конструктор по-умолчанию) приватным (чтобы доступ к нему
// был закрыть за пределами класса, тогда он не сможет возвращать новые объекты):
    private Singleton() {

    }
    //№3 Объявить статический создающий метод, который будет использоваться для получения одиночки:
    public static Singleton getInstance() {
        if(singleton==null){//если объект еще не создан
            singleton=new Singleton();//создать новый объект
        }
        return singleton;
    }

}

