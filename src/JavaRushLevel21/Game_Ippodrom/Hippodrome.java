package JavaRushLevel21.Game_Ippodrom;


import java.security.PublicKey;
import java.util.ArrayList;
import java.util.List;

//1
    /* Сегодня мы напишем небольшую игру под названием "Ипподром".
Когда я говорю мы - я имею ввиду тебя. Я же буду работать наставником.

Для начала нам понадобятся классы "ипподром" и "лошадь".
Создай классы Hippodrome (ипподром), Horse (лошадь).

Также не забудь, что любая программа начинается с метода main.
Добавь его в класс Hippodrome.*/
//2
    /*Раз это ипподром, то на нем должны быть лошади.
Значит наш ипподром должен хранить список всех его лошадей.
Добавь поле horses типа List<Horse> в класс Hippodrome.
А чтобы лошадей не украли - сделай это поле приватным.
Добавь getter для этого поля.*/
//3
    /*Несмотря на то что мы объявили переменную horses, сам список еще не создан (если ты конечно не
    успел опередить нас).
Создай конструктор класса Hippodrome с одним параметром типа List.
Сохрани в поле horses полученный в качестве параметра список (инициализируй поле horses).*/
//4
    /*Теперь вернемся к лошадям. У каждой лошади на скачках должны быть известны имя (name) и скорость (speed).
Наши лошади будут бежать просто определенное время (100 секунд/"шагов").
Будем определять победителя, как лошадь, пробежавшую наибольшую дистанцию.
Поэтому нам понадобится хранить еще и расстояние (distance), которое лошадь уже пробежала.
Добавь в класс Horse переменные name (String), speed (double), distance (double*/
//5
    /*Закончим написание класса лошадь (Horse).
Добавь конструктор с параметрами (name, speed, distance).
Добавь getter'ы и setter'ы для всех полей класса Horse.
Делай все методы public, если явно не указано обратное*/
//6
    /*Теперь перейдем к классу Hippodrome и методу main.
Нам нужно создать объект типа Hippodrome и добавить ему несколько лошадей.

Для начала, в классе Hippodrome создай статическое поле game типа Hippodrome.

В методе main требуется:
a) Создать список лошадей (horses).
б) Создать три объекта "лошадь". Имена придумай сам. Начальная скорость у всех лошадей - 3, дистанция - 0.
в) Добавить созданных лошадей в список horses.
г) Создать объект типа Hippodrome, используя созданный ранее список лошадей, и сохранить этот объект в поле game.*/
//7
    /*Но и это еще не все - надо чтобы лошади бежали.
Добавь в класс Hippodrome void методы run, move и print. Без параметров.
Метод move будет управлять движением всех лошадей.
Метод print отрисовывать их на экран.
А метод run - управлять всем этим.*/
//8
    /*В методе run сделай цикл от 1 до 100. Это и будет наш забег.
В теле цикла вызываем сначала move, затем print.
Чтобы весь цикл не отработал за долю секунды - добавь в него еще Thread.sleep(200)*/
//9
    /*Теперь вернемся к методам move и print. Начнем с move.

В методе move класса Hippodrome в цикле у каждой лошади мы вызываем метод move.

Да ты прав, его еще нет у класса Horse.

Поэтому в класс Horse надо добавить свой метод move :)

И метод print, кстати тоже.

Если я не говорю ничего насчет параметров метода, значит метод без параметров.

Делай все методы public, если явно не указано обратное.*/
//10
    /*Еще нужно написать метод print класса Hippodrome.
В нем тоже все просто: в цикле для каждой лошади вызываем ее метод print.
Ну, и еще выведи после цикла 10 пустых строк: System.out.println() - чтобы было красивее.*/
//11
    /*С классом Hippodrome почти закончили.
Добавь в конец метода main вызов run().

Подсказка:
run() - это нестатический метод, поэтому вызвать его можно только у объекта.
А где взять объект?

Подсказка 2:
game.run();*/
//12
    /*Осталось совсем немного - дописать класс Horse.
Каждый ход у лошади будет вызываться метод move.
Когда у лошади вызывают метод move, лошадь должна пробежать некоторую дистанцию.
Дистанция зависит от скорости лошади (speed). В самом простом варианте, выглядеть этот метод должен примерно так: distance += speed;
Но, чтобы было интереснее, давай сделаем так, чтобы скорость все время немного менялась.
Для этого умножь speed на случайное число.
Случайное число можно получить с помощью метода Math.random().*/
//13
    /*Теперь вернемся к методу print класса Horse.

Т.к. мы работаем с консолью, то все лошади на бегах будут выглядеть примерно так:
........Slevin
....Lucky
..........Homer

Другими словами, в методе print надо вывести на экран строку состоящую из точек и имени лошади.
Количество точек равно distance, округленному (в меньшую сторону) до целого числа.
*/
//14
    /*Запускаем и любуемся.
У нас каждые полсекунды отображается новый кадр с ситуацией на ипподроме.
Мышкой уменьши размер консоли так, чтобы был виден только один "кадр" и на том же самом месте.

Тогда можно наблюдать забег в живую и даже покомментировать:
- Старт.
- Гомер неожиданно обходит Лаки.
- Слевин вырывается вперед.
- Вперед Лаки!
- 10 баксов на Слевина.
- Похоже Лаки сбросил жокея и расслабился.
- Гомер уверенно вырывается вперед.
- Неожиданно для всех побеждает Гомер. Вот это номер!*/
//15
    /*Добавим определение победителя.
В классе Hippodrome сделаем два метода:
public Horse getWinner() и public void printWinner()

Метод getWinner должен возвращать лошадь пробежавшую самую большую дистанцию.
Метод printWinner выводит на экран имя победителя в виде: Winner is <name>!

Пример:
Winner is Lucky!    */
public class Hippodrome {
  private   List<Horse> horses=new ArrayList<>();

    public List<Horse> getHorses() {
        return horses;
    }

    public  Hippodrome(){

    }
    public Hippodrome(List<Horse> horses) {
        this.horses = horses;
    }
    static Hippodrome game;


    void move(){
        for (int i = 0; i <horses.size() ; i++) {
            horses.get(i).move();

        }


    }


    void print(){

        for (int i = 0; i < horses.size(); i++) {
            horses.get(i).print();

        }

        for (int i = 0; i < 10; i++) {
            System.out.println();
        }





    }
    double middle=0;
    Horse horsewinner=null;
    public Horse getWinner(){

        for (int i = 0; i < horses.size() ; i++) {
            if(horses.get(i).distance>middle){
                middle=horses.get(i).distance;
                horsewinner=horses.get(i);
            }

        }
        return horsewinner;
    }
    public void printWinner(){
        System.out.println("Winner is "+ getWinner().name+"!");

    }



    void run() throws InterruptedException {
        for (int i = 0; i < 100; i++) {//в условии сказано от1до 100 но валидатор пропускает тольок такой вариант
            move();
            print();
            Thread.sleep(200);

        }

    }





    public static void main(String[] args) throws InterruptedException {
        List<Horse> horses=new ArrayList<>();

       Horse horse1=new Horse("Lucky",3,0);
       Horse horse2=new Horse("Gomer",3,0);
       Horse horse3=new Horse("Slevin",3,0);
       horses.add(horse1);
       horses.add(horse2);
       horses.add(horse3);

     game=new Hippodrome(horses);
     game.run();

     game.printWinner();


    }
}
